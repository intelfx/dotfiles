snippet pkgver-git-simple
	pkgver() {
		cd ${1:"\$pkgname"}
		git describe --long $0| sed 's/^v//;s/-/.r/;s/-/./'
	}

snippet pkgver-git
	pkgver() {
		cd ${1:"\$pkgname"}
		git describe --long $0| sed 's/^v//;s/[^-]*-g/r&/;s/-/./g'
	}

snippet pkgver-git-revcount
	pkgver() {
		cd ${1:"\$pkgname"}
		printf "r%s.%s" "\$(git rev-list --count HEAD)" "\$(git rev-parse --short HEAD)"
	}

snippet prepare-patches
	for p in "\${source[@]}"; do
		if [[ \${p} == *.patch ]]; then
			git apply "\${srcdir}/\${p}"
		fi
	done

snippet python-pep517
	makedepends=('python-build' 'python-installer' 'python-wheel')
	
	build() {
		cd ${1:"\$pkgname"}
		python -m build --wheel --no-isolation
	}
	
	package() {
		cd ${1:"\$pkgname"}
		python -m installer --destdir="\$pkgdir" dist/*.whl
	}

snippet python-setuptools
	makedepends=('python-setuptools')
	
	build() {
		cd ${1:"\$pkgname"}
		python setup.py build
	}
	
	package() {
		cd ${1:"\$pkgname"}
		python setup.py install --root="\$pkgdir" --skip-build --optimize=1
	}

snippet python-check
	check() {
		cd ${1:"\$pkgname"}
		local python_version=\$(python -c 'import sys; print("".join(map(str, sys.version_info[:2])))')

		PYTHONPATH="\$PWD/build/lib.linux-\$CARCH-cpython-\${python_version}" ${2:-pytest}
	}

snippet go-flags-export
	export CGO_CPPFLAGS="\${CPPFLAGS}\"
	export CGO_CFLAGS="\${CFLAGS}\"
	export CGO_CXXFLAGS="\${CXXFLAGS}\"
	export CGO_LDFLAGS="\${LDFLAGS}\"
	export GOFLAGS="-trimpath -buildmode=pie -mod=readonly -modcacherw '-ldflags=-linkmode=external \\"-extldflags=\${LDFLAGS}\\"'"

snippet go-flags-build
	go build \\
		-trimpath \\
		-buildmode=pie \\
		-mod=readonly \\
		-modcacherw \\
		-ldflags "-linkmode=external \\"-extldflags=\${LDFLAGS}\\"" \\
		.

snippet python-version
		local python_version=\$(python -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')

snippet python-site-packages
		local site_packages=\$(python -c "import site; print(site.getsitepackages()[0])")

snippet python-drop-fortify
	# HACK: python/cython apparently captures the gcc flags used when building itself
	# and prepends them to $CFLAGS when building extensions, creating a conflict
	# over the definition of _FORTIFY_SOURCE:
	#  <command-line>: error: "_FORTIFY_SOURCE" redefined [-Werror]
	# Inject a flag to undefine _FORTIFY_SOURCE prior to redefining it.
	shopt -s lastpipe
		for v in CFLAGS CXXFLAGS; do
		sed <<<"\${!v}" -r 's|-Wp,-D_FORTIFY_SOURCE=|-Wp,-U_FORTIFY_SOURCE &|' | read -r "\$v"
	done

snippet gitmodules-declare
	declare -g -A _gitmodules=(
		[SUBNAME]="git+SUBURL"
		[SUBPATH:SUBNAME]="git+SUBURL"
	)
	for _suburl in "\${_gitmodules[@]}"; do
		_subloc="\$(get_filename "\$_suburl")"
		source+=( "\$_suburl" ); CHECKSUMVAR+=( SKIP ); noextract+=( "\$_subloc" )
	done


snippet gitmodules-prepare
	printf "%s\\n" "\${!_gitmodules[@]}" | sort | while read _sub; do
		if [[ \$_sub == *:* ]]
		then _git=( git -C "\${_sub%:*}" ); _subname="\${_sub#*:}"
		else _git=( git );                 _subname="\$_sub"
		fi
		_subpath="\$("\${_git[@]}" config -f .gitmodules "submodule.\$_subname.path")"
		_suburl="\${_gitmodules[\$_sub]}"; _subloc="\\$(get_filepath "\$_suburl")"
		"\${_git[@]}" submodule init "\$_subpath"
		"\${_git[@]}" config "submodule.\$_subname.url" "\$_subloc"
		"\${_git[@]}" -c protocol.file.allow=always submodule update "\$_subpath"
	done

snippet printflags
	declare -p -x \\
		| grep -E ' ((CC|CXX)=|CARGO_|(C|CXX|LD|RUST)FLAGS)' \\
		| while read line; do msg2 "\$line"; done

snippet clang-flags
	export CC=clang
	export CXX=clang++
	for _varname in CFLAGS CXXFLAGS LDFLAGS; do
		declare -n _var="\$_varname"
		_var+=" -Wno-error=unused-command-line-argument"
		_var="\${_var// -flto-partition+([^ ])}"
		_var="\${_var// -fuse-linker-plugin}"
		_var="\${_var// -fuse-ld+([^ ])}"
	done
	LDFLAGS+=" -fuse-ld=lld"
