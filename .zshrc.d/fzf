#!/hint/zsh

#
# Reminder to myself how this works.
# We have two completion providers, fzf-provided scripts (hereinafter fzf.zsh) and fzf-tab.
#
# 1. Random commands -> fzf-tab
#    `$ random-command <Tab>` -> compsys + fzf-tab
#
# 2. Select commands -> fzf/completion.zsh (`**` is `$FZF_COMPLETION_TRIGGER`)
#    `$ vim **<Tab>` -> _fzf_compgen_path() (`$FZF_COMPLETION_OPTS`)
#    `$ cd **<Tab>` -> _fzf_compgen_dir() (`$FZF_COMPLETION_OPTS`)
#    ...
#
# 3. Special Vi mode key combinations -> fzf/key-bindings.zsh
#    `/` -> `fzf-history-widget` (`$FZF_CTRL_R_OPTS`)
#           NB: relevance sorting is still `^R` because it is hardcoded in the widget!
#    `C` -> `fzf-cd-widget` (`$FZF_ALT_C_COMMAND`, `$FZF_ALT_C_OPTS`)
#    `^T` -> `fzf-file-widget` (`$FZF_CTRL_T_COMMAND`, `$FZF_CTRL_T_OPTS`)
#
# 4. Command-line usage: see `$FZF_DEFAULT_COMMAND`
#
# 5. All of the above: see `$FZF_DEFAULT_OPTS`
#

if ! [[ -d /usr/share/fzf ]]; then
	return
fi

source /usr/share/fzf/completion.zsh
source /usr/share/fzf/key-bindings.zsh

#
# Configure fzf-tab
#

# disable sort when completing `git checkout` and `git commit`
zstyle ':completion:*:git-*:*' sort false
# force zsh not to show completion menu, which allows fzf-tab to capture the unambiguous prefix
zstyle ':completion:*' menu no

zstyle ':fzf-tab:*' switch-group 'alt-1' 'alt-2'
zstyle ':fzf-tab:*' query-string input
if [[ $TMUX ]]; then
	zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup
fi

# override fzf-tab's hardcoded highlight color with our own
# (requires that colors-solarized snippet is already loaded)
_fix_ftb_colors() {
	local _hlcolors=( "${(@f)$( grep -Eo '[a-z]+\+?:[^,[:space:]]+' <<< "$FZF_DEFAULT_OPTS" )}" )

	zstyle ':fzf-tab:*' fzf-flags --color "$(IFS=','; echo "${_hlcolors[*]}")"
}
_fix_ftb_colors

#
# Set up behavior for fzf.zsh
#

# Options to fzf command
export FZF_COMPLETION_OPTS='
--ansi
--border
--info=inline
--bind=ctrl-space:toggle
'

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
if command -v fd &>/dev/null; then
	# NOTE the double negative here: "ignore git repo" means
	# "do not use its settings", i. e. "ignore its .gitignore"
	__fzf_compgen_skip_vcs_at() {
		local git_toplevel_dir
		# do not use gitignore from $HOME
		if git_toplevel_dir="$(git -C "$1" rev-parse --show-toplevel 2>/dev/null)" \
		   && [[ "$git_toplevel_dir" == "$HOME" ]]; then
			return 0
		fi
		return 1
	}

	__fzf_compgen_nofollow_at() {
		# do not follow symlinks under /sys
		if [[ $1/ == /sys/* ]]; then
			return 0
		fi
		return 1
	}

	__fzf_compgen_fd() {
		# fd_opts declared in parent scope
		fd_opts+=( --hidden --exclude ".git" )
		if ! __fzf_compgen_nofollow_at "$1"; then
			fd_opts+=( --follow )
		fi
		if __fzf_compgen_skip_vcs_at "$1"; then
			fd_opts+=( --no-ignore-vcs --no-ignore-parent )
		fi
		# fzf uses --ansi 
		fd_opts+=( --color=always )
		fd "${fd_opts[@]}" . "$1"
	}

	_fzf_compgen_path() {
		local fd_opts=()
		__fzf_compgen_fd "$1"
	}

	_fzf_compgen_dir() {
		local fd_opts=(--type d)
		__fzf_compgen_fd "$1"
	}
fi

#
# Set up custom keybindings for fzf.zsh widgets
#

# Use zsh Normal Mode + / (reverse-i-search, vi-history-search-backward) to use fzf instead
# (likewise for Normal Mode + ?)
bindkey -M vicmd '/' fzf-history-widget
bindkey -M vicmd '?' fzf-history-widget
# Do not interpret Insert Mode + ESC + [/,] as _history-complete-* as it conflicts with normal Vi mode usage
bindkey -M viins -r '^[/'
bindkey -M viins -r '^[,'

# Do not interpret ESC + c as fzf-cd-widget as it conflicts with normal Vi mode usage
bindkey -M vicmd -r '^[c'
bindkey -M viins -r '^[c'
# Instead, use zsh Normal Mode + C (capital)
bindkey -M vicmd 'C' fzf-cd-widget

#
# Clever hack: set up double <Tab> instead of $FZF_COMPLETION_TRIGGER for fzf.zsh
#

# Another reminder for myself how this all works.
#
# Both fzf-tab and fzf/completion.zsh (hereinafter fzf.zsh) bind their widgets
# to ^I (Tab) and wrap the previously bound widget.
#
# fzf-tab manual advises the user to load fzf-tab last (specifically, after
# fzf.zsh) such that fzf-tab's widget (fzf-tab-complete) is called first and
# wraps the fzf.zsh's widget (fzf-complete).
#
# However, for the double <Tab> hack we inverse the order temporarily
# by overriding each completion system's "previous/wrapped widget" variable,
# such that fzf.zsh's widget runs first and potentially falls back to the
# fzf-tab's widget (fzf-tab-complete), which then calls expand-or-complete
# to get its results (this widget is wrapped, not fell back to).
#
# The reason for this is that if I use a double <Tab> and fzf-complete fails to
# come up with a completion, it will call the next wrapped widget, which has to
# be fzf-tab-complete so that I still get some sort of fzf-powered completion
# instead of expand-or-complete (the default one).

fzf-completion-notrigger() {
	# disable trigger just this once
	local FZF_COMPLETION_TRIGGER=""
	# if fzf-completion can't come up with something, call fzf-tab-complete
	# instead of the default completion widget (expand-or-complete).
	# At the same time, override fzf-tab-complete's wrapped widget so that
	# it calls expand-or-complete instead of recursing into fzf-completion.
	local _ftb_orig_widget='expand-or-complete'
	local fzf_default_completion='fzf-tab-complete'
	fzf-completion "$@"
}
zle -N fzf-completion-notrigger

# Copy expand-or-complete (for $_ftb_orig_widget override above) under the name
# fzf-tab-complete expects to find it. When initializing, fzf-tab would do this
# for the previous defined widget (fzf-completion) only. Original comment:
# "Copy the widget before it's wrapped by zsh-autosuggestions and zsh-syntax-highlighting."
zle -A expand-or-complete .fzf-tab-orig-expand-or-complete

# Set an aggressive $KEYTIMEOUT to make usage of single <Tab> less miserable
KEYTIMEOUT=20
# Bind double <Tab>
bindkey '\t\t' fzf-completion-notrigger
# Bind Ctrl-Space in case I am unable to use double <Tab> due to a combination
# of the aggressive $KEYTIMEOUT on a slow link.
bindkey '^ ' fzf-completion-notrigger
