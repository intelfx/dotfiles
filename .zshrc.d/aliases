#!/hint/zsh

#
# Personnal Aliases
#

alias mkdir='mkdir -pv'

alias ..='cd ..'
alias cd..='cd ..'

alias du='du -h'    # Makes a more readable output.
alias df='df -Th'
# Attempt(s) at a "df, real filesystems only"
alias dfr='df -Th -x tmpfs -x devtmpfs -x efivarfs'
alias dff='findmnt -D -t notmpfs,nodevtmpfs,nofuse.portal'
alias blks='lsblk -o "NAME,FSTYPE,LABEL,FSSIZE,FSUSED,FSAVAIL,FSUSE%,MOUNTPOINTS"'

# Pretty-print of some PATH variables:
alias path='echo -e ${PATH//:/\\n}'
alias libpath='echo -e ${LD_LIBRARY_PATH//:/\\n}'

alias catconfig='grep -vE "^$|^ *(#|;)"'
alias fields='cut -d " " -f '

alias wget='wget -c'
alias bc='bc -l'
alias sha1='openssl sha1'
alias diff='colordiff'
alias jqr='jq -r'
alias yqf='jqf --jq=yq'

# do not highlight matches, because matches are all that we're emitting
alias rgc="rg --colors 'match:none' -or '\$1'"
# grep does not have this, sadly
# emulate with `rg -uuu`
alias grepc="rg -uuu --colors 'match:none' -or '\$1'"

alias r-cp-n='rsync -r --partial --no-i-r'
alias r-cp='r-cp-n -aHAX'
alias r-mv='r-cp --remove-source-files'
alias r-mv-n='r-cp-n --remove-source-files'
alias r-sync='r-cp --delete'
alias r-install='r-cp-n -lEDH' # no perms (executability instead), times, group, owner, ACLs, xattrs
alias r-put='r-mv-n -ltDH --chmod=ugo=rwX' # no perms, group, owner, ACLs, xattrs
alias r-cput='r-cp-n -ltDH --chmod=ugo=rwX' # no perms, group, owner, ACLs, xattrs
alias r-sync-put='r-cp-n -ltDH --chmod=ugo=rwX --delete' # no perms, group, owner, ACLs, xattrs

# FIXME: default ACLs vs umask
alias cp-put='cp -dPR --preserve=timestamps --reflink'

if [[ $WAYLAND_DISPLAY || $DISPLAY ]]; then
	alias xman='xdg-man'
fi

# this export only makes sense in the interactive sessions
# replaces {,c}cmake() functions/aliases to set default generator
export CMAKE_GENERATOR=Ninja

function cmake-c() {
	cmake -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ "$@"
}

function ccmake-c() {
	ccmake -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ "$@"
}

function mkcd() {
	mkdir -pv "$1" && cd "$1"
}

function tmpcd() {
	local name
	name="$(date -Iseconds)" || return
	mkdir -pv "$HOME/tmp/tmp-$name" || return
	cd "$HOME/tmp/tmp-$name"
}
alias tmp='tmpcd'

function make() {
	local has_jobs= has_makefile=
	for arg; do
		case "$arg" in
		-j*|--jobs*) has_jobs=1 ;;
		-f*|--file*|--makefile*) has_makefile=1 ;;
		esac
	done
	if [[ -e GNUmakefile || -e Makefile || -e makefile ]]; then
		has_makefile=1
	fi

	local extra_args=()
	if ! [[ $has_jobs ]]; then
		extra_args+=( -j$(nproc) )
	fi
	if ! [[ $has_makefile ]]; then
		extra_args+=( -f ~/bin/devel/Makefile )
	fi
	command make "${extra_args[@]}" "$@"
}

function strip-color() {
	sed -r $'s/\x1b\x5b[[0-9;]+m//g'
}

function make_single_module() {
	local mod="$1"
	local dest="/usr/lib/modules/$(uname -r)/kernel/$mod.xz"
	make -j8 prepare modules_prepare
	make -j8 "$mod"
	xz -f -9 "$mod"
	sudo install -v -Dm644 "$mod.xz" "/usr/lib/modules/$(uname -r)/kernel/$mod.xz"
}

# I don't use Boost.Build
alias b2='backblaze-b2'

function loadflags() {
	eval "$(bash -c '
. /etc/makepkg.conf
declare -p CPPFLAGS CFLAGS CXXFLAGS LDFLAGS 2>/dev/null | sed -nr "s|^declare (-[^ ]+ )+|export |p"
')"
}

function loadflags_lto() {
	eval "$(bash -c '
. /etc/makepkg.conf
CFLAGS+=" $LTOFLAGS"
CXXFLAGS+=" $LTOFLAGS"
LDFLAGS+=" $LTOFLAGS"
declare -p CPPFLAGS CFLAGS CXXFLAGS LDFLAGS 2>/dev/null | sed -nr "s|^declare (-[^ ]+ )+|export |p"
')"
}

function loadflags_best() {
	export CFLAGS="-march=native -O3 -fno-plt -flto=auto -fuse-linker-plugin -pipe"
	export CXXFLAGS="$CFLAGS"
	export LDFLAGS="$CFLAGS -Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now"
}

function loadflags_dbg() {
	eval "$(bash -c '
. /etc/makepkg.conf
CFLAGS+=" $DEBUG_CFLAGS"
CXXFLAGS+=" $DEBUG_CXXFLAGS"
declare -p CPPFLAGS CFLAGS CXXFLAGS LDFLAGS 2>/dev/null | sed -nr "s|^declare (-[^ ]+ )+|export |p"
')"
}
