#!/hint/zsh

#
# Personnal Aliases
#

alias mkdir='mkdir -pv'

alias ..='cd ..'
alias cd..='cd ..'

alias du='du -h'    # Makes a more readable output.
alias df='df -Th'
# Attempt(s) at a "df, real filesystems only"
alias dfr='df -Th -x tmpfs -x devtmpfs -x efivarfs'
alias dff='findmnt -D -t notmpfs,nodevtmpfs,nofuse.portal'
alias blks='lsblk -o "NAME,FSTYPE,LABEL,FSSIZE,FSUSED,FSAVAIL,FSUSE%,MOUNTPOINTS"'

# Pretty-print of some PATH variables:
alias path='echo -e ${PATH//:/\\n}'
alias libpath='echo -e ${LD_LIBRARY_PATH//:/\\n}'

alias catconfig='grep -vE "^$|^ *(#|;)"'
alias fields='cut -d " " -f '
alias catbs="sed ':x; /\\\\$/ { N;  s/ *\\\\\\n *//; tx }'"

alias wget='wget -c'
alias bc='bc -l'
alias sha1='openssl sha1'

if command -v bat &>/dev/null; then
	alias cat='bat'
fi
if command -v colordiff &>/dev/null; then
	alias diff='colordiff'
fi

if command -v jq jqf yq tomlq &>/dev/null; then
	alias jqr='jq -r'
	alias yqf='jqf --jq=yq'
	alias tomlqf='jqf --jq=tomlq'
fi

if command -v rg &>/dev/null; then
	# do not highlight matches, because matches are all that we're emitting
	alias rgc="rg --colors 'match:none' -or '\$1'"
	# grep does not have this, sadly
	# emulate with `rg -uuu`
	alias grepc="rg -uuu --colors 'match:none' -or '\$1'"
fi

if command -v perl rlwrap &>/dev/null; then
	# Poor man's REPL for perl
	# https://stackoverflow.com/a/22840242/857932
	# https://stackoverflow.com/questions/73667/how-can-i-start-an-interactive-console-for-perl#comment100588494_22840242
	alias iperl="rlwrap -A -pgreen -S'perl> ' perl -MData::Dumper -wnE'say Dumper[eval()]//\$@'"
fi

if command -v rsync &>/dev/null; then
	alias r-cp-n='rsync -r --partial --no-i-r'
	alias r-cp='r-cp-n -aHAX'
	alias r-mv='r-cp --remove-source-files'
	alias r-mv-n='r-cp-n --remove-source-files'
	alias r-sync='r-cp --delete'
	alias r-install='r-cp-n -lEDH' # no perms (executability instead), times, group, owner, ACLs, xattrs
	alias r-put='r-mv-n -ltDH --chmod=ugo=rwX' # no perms, group, owner, ACLs, xattrs
	alias r-cput='r-cp-n -ltDH --chmod=ugo=rwX' # no perms, group, owner, ACLs, xattrs
	alias r-sync-put='r-cp-n -ltDH --chmod=ugo=rwX --delete' # no perms, group, owner, ACLs, xattrs
fi

# FIXME: default ACLs vs umask
alias cp-put='cp -dPR --preserve=timestamps --reflink'

if [[ $WAYLAND_DISPLAY || $DISPLAY ]]; then
	alias xman='xdg-man'
fi

# ssh/scp/sftp to "temporary" hosts
alias ssht="ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null"
alias scpt="scp -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null"
alias sftpt="sftp -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null"
alias mosht="mosh --ssh='ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null'"

# compression
alias zstd="zstd -T0"
alias zstd1="zstd -1"
alias zstd11="zstd -11"
alias zstd19="zstd -19"
alias zstd22="zstd --ultra -22"
# skip tar wrapper in ~/bin to supporess tar's own output
alias tzst="/usr/bin/tar -I 'zstd -v -T0'"
alias tzst1="/usr/bin/tar -I 'zstd -v -T0 -1'"
alias tzst11="/usr/bin/tar -I 'zstd -v -T0 -11'"
alias tzst19="/usr/bin/tar -I 'zstd -v -T0 -19'"
alias tzst22="/usr/bin/tar -I 'zstd -v -T0 -19'"

# tmux things
alias tvs='tmux split-window -h -c $PWD'
alias tvsplit='tmux split-window -h -c $PWD'
alias tVs='tmux split-window -h -f -c $PWD'
alias tVsplit='tmux split-window -h -f -c $PWD'
alias tsp='tmux split-window -v -c $PWD'
alias tsplit='tmux split-window -v -c $PWD'
alias tSp='tmux split-window -v -f -c $PWD'
alias tSplit='tmux split-window -v -f -c $PWD'
alias trespawn='tmux respawn-pane -k -c $PWD'

# this export only makes sense in the interactive sessions
# replaces {,c}cmake() functions/aliases to set default generator
export CMAKE_GENERATOR=Ninja

function mkcd() {
	mkdir -pv "$1" && cd "$1"
}

function tmpcd() {
	local name
	name="$(date -Iseconds)" || return
	mkdir -pv "$HOME/tmp/tmp-$name" || return
	cd "$HOME/tmp/tmp-$name"
}
alias tmp='tmpcd'

function make() {
	local has_jobs= has_makefile=
	for arg; do
		case "$arg" in
		-j*|--jobs*) has_jobs=1 ;;
		-f*|--file*|--makefile*) has_makefile=1 ;;
		esac
	done
	if [[ -e GNUmakefile || -e Makefile || -e makefile ]]; then
		has_makefile=1
	fi

	local extra_args=()
	if ! [[ $has_jobs ]]; then
		extra_args+=( -j$(nproc) )
	fi
	if ! [[ $has_makefile ]]; then
		extra_args+=( -f ~/bin/devel/Makefile )
	fi
	command make "${extra_args[@]}" "$@"
}

function strip-color() {
	sed -r $'s/\x1b\x5b[[0-9;]+m//g'
}

# I don't use Boost.Build
alias b2='backblaze-b2'

# OpenStack things
# create an image with UEFI boot mode (works for OVH)
#   * for future me: openstack-image-create-uefi --progress --private --disk-format qcow2
alias openstack-image-create-uefi="openstack image create \
	--property hw_firmware_type='uefi' \
	--property hw_qemu_guest_agent='yes' \
	--property hw_disk_bus='scsi' \
	--property hw_scsi_model='virtio-scsi' \
	--property hypervisor_type='qemu' \
"

#
# Compile flags
#

function loadflags_opt() {
	eval "$(bash -c '
. /etc/makepkg.conf
declare -p CPPFLAGS CFLAGS CXXFLAGS LDFLAGS 2>/dev/null | sed -nr "s|^declare (-[^ ]+ )+|export |p"
')"
}

function loadflags_lto() {
	eval "$(bash -c '
. /etc/makepkg.conf
CFLAGS+=" $LTOFLAGS"
CXXFLAGS+=" $LTOFLAGS"
LDFLAGS+=" $LTOFLAGS"
declare -p CPPFLAGS CFLAGS CXXFLAGS LDFLAGS 2>/dev/null | sed -nr "s|^declare (-[^ ]+ )+|export |p"
')"
}

function loadflags_dbg() {
	eval "$(bash -c '
. /etc/makepkg.conf
CFLAGS+=" $DEBUG_CFLAGS"
CXXFLAGS+=" $DEBUG_CXXFLAGS"
declare -p CPPFLAGS CFLAGS CXXFLAGS LDFLAGS 2>/dev/null | sed -nr "s|^declare (-[^ ]+ )+|export |p"
')"
}


function loadflags_clang_opt() {
	eval "$(bash -c '
. /etc/makepkg.conf
CC=clang
CXX=clang++
declare -p CC CXX CPPFLAGS CFLAGS CXXFLAGS LDFLAGS RUSTFLAGS 2>/dev/null | sed -nr "s|^declare (-[^ ]+ )+|export |p"
')"
}

function loadflags_clang_dbg() {
	eval "$(bash -c '
. /etc/makepkg.conf
CC=clang
CXX=clang++
CFLAGS+=" $DEBUG_CFLAGS"
CXXFLAGS+=" $DEBUG_CXXFLAGS"
RUSTFLAGS+=" $DEBUG_RUSTFLAGS"
declare -p CC CXX CPPFLAGS CFLAGS CXXFLAGS LDFLAGS RUSTFLAGS 2>/dev/null | sed -nr "s|^declare (-[^ ]+ )+|export |p"
')"
}

function loadflags_clang_lto() {
	eval "$(bash -c '
. /etc/makepkg.conf
shopt -s extglob
CC=clang
CXX=clang++
CFLAGS="${CFLAGS// -fuse-ld=+([^ ])}"; CFLAGS+=" -flto=full"
CXXFLAGS="${CXXFLAGS// -fuse-ld=+([^ ])}"; CXXFLAGS+=" -flto=full"
LDFLAGS="${LDFLAGS// -fuse-ld=+([^ ])}"; LDFLAGS+=" -fuse-ld=lld -flto=full"
RUSTFLAGS="${RUSTFLAGS// -C*( )link-arg=-fuse-ld=+([^ ])}"; RUSTFLAGS+=" -C linker=clang -C link-arg=-fuse-ld=lld -C linker-plugin-lto"
CARGO_PROFILE_RELEASE_LTO=fat
declare -p CC CXX CPPFLAGS CFLAGS CXXFLAGS LDFLAGS RUSTFLAGS "${!CARGO_PROFILE_@}" 2>/dev/null | sed -nr "s|^declare (-[^ ]+ )+|export |p"
')"
}

function loadflags_clang_lto_thin() {
	eval "$(bash -c '
. /etc/makepkg.conf
shopt -s extglob
CC=clang
CXX=clang++
CFLAGS="${CFLAGS// -fuse-ld=+([^ ])}"; CFLAGS+=" -flto=thin"
CXXFLAGS="${CXXFLAGS// -fuse-ld=+([^ ])}"; CXXFLAGS+=" -flto=thin"
LDFLAGS="${LDFLAGS// -fuse-ld=+([^ ])}"; LDFLAGS+=" -fuse-ld=lld -flto=thin"
RUSTFLAGS="${RUSTFLAGS// -C*( )link-arg=-fuse-ld=+([^ ])}"; RUSTFLAGS+=" -C linker=clang -C link-arg=-fuse-ld=lld -C linker-plugin-lto"
CARGO_PROFILE_RELEASE_LTO=thin
declare -p CC CXX CPPFLAGS CFLAGS CXXFLAGS LDFLAGS RUSTFLAGS "${!CARGO_PROFILE_@}" 2>/dev/null | sed -nr "s|^declare (-[^ ]+ )+|export |p"
')"
}

function setflags_opt() {
	export CFLAGS="-march=native -O3 -pipe -fno-plt -flto=auto -fuse-linker-plugin"
	export CXXFLAGS="$CFLAGS"
	export LDFLAGS="$CFLAGS -Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now -fuse-ld=mold"
}

function setflags_dbg() {
	export CFLAGS="-march=native -Og -ggdb3 -pipe -fno-plt -fexceptions -Wp,-D_FORTIFY_SOURCE=3 -Wformat -Werror=format-security -fstack-clash-protection -fcf-protection"
	export CXXFLAGS="$CFLAGS -Wp,-D_GLIBCXX_ASSERTIONS"
	export LDFLAGS="-Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now -fuse-ld=mold"
}

function -setgoflags() {
	export CGO_CPPFLAGS="${CPPFLAGS}"
	export CGO_CFLAGS="${CFLAGS}"
	export CGO_CXXFLAGS="${CXXFLAGS}"
	export CGO_LDFLAGS="${LDFLAGS}"
	export GOFLAGS="-buildmode=pie -trimpath '-ldflags=-linkmode=external \"-extldflags=${LDFLAGS}\"' -mod=readonly -modcacherw"
}

for s in dbg opt lto; do
	eval "function loadgoflags_$s() { loadflags_$s; -setgoflags; }"
done
unset s

function printflags() {
	declare -p CPPFLAGS CFLAGS CXXFLAGS LDFLAGS 2>/dev/null
}

function printgoflags() {
	declare -p CGO_CPPFLAGS CGO_CFLAGS CGO_CXXFLAGS CGO_LDFLAGS GOFLAGS
}
