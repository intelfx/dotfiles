#!/hint/zsh
# shellcheck disable=SC2016,SC2215,SC2296,SC2142,SC2164
# (not zsh)

function -trace() {
	# use a bash-like $PS4
	# quoting dance is needed to subtract current depth from command depth
	local PS4='${(l.${(%):-%e}+1-'${(%):-%e}'..+.)} '
	local rc
	set -x
	"$@"
	# $? is captured under the redirection to preserve clean stderr output
	{ rc=$?; set +x; } &>/dev/null
	return $rc
}

function -has() {
	command -v "$@" &>/dev/null
}

function -command() {
	command -v "$@"
}

function -join() {
	local sep="$1"
	shift
	printf "%s" "${(pj:$sep:)${@}}"
}

#
# personal aliases
#

alias mkdir='mkdir -pv'

alias ..='cd ..'
alias cd..='cd ..'

alias du='du -h'    # Makes a more readable output.
alias df='df -Th'
# Attempt(s) at a "df, real filesystems only"
alias dfr='df -Th -x tmpfs -x devtmpfs -x efivarfs'
alias dff='findmnt -D -t notmpfs,nodevtmpfs,nofuse.portal'
alias blks='lsblk -o "NAME,FSTYPE,LABEL,FSSIZE,FSUSED,FSAVAIL,FSUSE%,MOUNTPOINTS"'

# Pretty-print of some PATH variables:
alias path='print ${(F)${(s.:.)PATH}}'
alias libpath='print ${(F)${(s.:.)LD_LIBRARY_PATH}}'
alias pythonpath='print ${(F)${(s.:.)PYTHONPATH}}'

alias catconfig='grep -vE "^$|^ *(#|;)"'
alias fields='cut -d " " -f '
alias catbs="sed ':x; /\\\\$/ { N;  s/ *\\\\\\n *//; tx }'"

alias wget='wget -c'
alias bc='bc -l'
alias sha1='openssl sha1'

alias W='command -v'

if command -v bat &>/dev/null; then
	# fallback to actual cat(1) for file copying, as it can make use
	# of copy_file_range() and stuff (and is thus much faster)
	function cat() {
		if [[ -t 0 && -t 1 ]]; then
			bat "$@"
		else
			command cat "$@"
		fi
	}
	compdef cat=bat

	# "global aliases" for cutesy `anycommand --bathelp`
	# (+ `anycommand | bathelp` fallback for commands with non-standard help syntax)
	# XXX: abusing --style=changes to have an empty vertical grid w/o line numbers
	#      for readability
	alias bathelp='bat --language=help --style=changes,grid'
	alias -g -- --bathelp='--help 2>&1 | bathelp'
	alias -g -- --bathelp-all='--help-all 2>&1 | bathelp'

fi
if command -v colordiff &>/dev/null; then
	alias diff='colordiff'
fi

if command -v jq jqf &>/dev/null; then
	command -v yq &>/dev/null && alias yqf='jqf --jq=yq'
	command -v xq &>/dev/null && alias xqf='jqf --jq=xq'
	command -v tomlq &>/dev/null && alias tomlqf='jqf --jq=tomlq'
fi

if command -v rg &>/dev/null; then
	# do not highlight matches, because matches are all that we're emitting
	alias rgc="rg --colors 'match:none' -or '\$1'"
	alias rgo="rg --colors 'match:none' -o"
	# grep does not have this, sadly
	# emulate with `rg -uuu`
	alias grepc="rg -uuu --colors 'match:none' -or '\$1'"
	alias grepo="rg -uuu --colors 'match:none' -o"
fi

if command -v perl rlwrap &>/dev/null; then
	# Poor man's REPL for perl
	# https://stackoverflow.com/a/22840242/857932
	# https://stackoverflow.com/questions/73667/how-can-i-start-an-interactive-console-for-perl#comment100588494_22840242
	alias iperl="rlwrap -A -pgreen -S'perl> ' perl -MData::Dumper -wnE'say Dumper[eval()]//\$@'"
fi

if command -v rsync &>/dev/null; then
	alias r-cp-n='rsync -r --partial --no-i-r'
	alias r-cp='r-cp-n -aHAX'
	alias r-mv='r-cp --remove-source-files'
	alias r-mv-n='r-cp-n --remove-source-files'
	alias r-sync='r-cp --delete'
	alias r-install='r-cp-n -lEDH' # no perms (executability instead), times, group, owner, ACLs, xattrs
	alias r-put='r-mv-n -ltDH --chmod=ugo=rwX' # no perms, group, owner, ACLs, xattrs
	alias r-cput='r-cp-n -ltDH --chmod=ugo=rwX' # no perms, group, owner, ACLs, xattrs
	alias r-sync-put='r-cp-n -ltDH --chmod=ugo=rwX --delete' # no perms, group, owner, ACLs, xattrs
fi

# FIXME: default ACLs vs umask
alias cp-put='cp -dPR --preserve=timestamps --reflink'

if [[ $WAYLAND_DISPLAY || $DISPLAY ]]; then
	alias xman='xdg-man'
fi

# ssh/scp/sftp to "temporary" hosts
alias ssht="ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null"
alias scpt="scp -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null"
alias sftpt="sftp -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null"
alias mosht="mosh --ssh='ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null'"

# compression
alias zstd="zstd -T0"
alias zstd1="zstd -1"
alias zstd11="zstd -11"
alias zstd19="zstd -19"
alias zstd22="zstd --ultra -22"
# skip tar wrapper in ~/bin to supporess tar's own output
alias tzst="/usr/bin/tar -I 'zstd -v -T0'"
alias tzst1="/usr/bin/tar -I 'zstd -v -T0 -1'"
alias tzst11="/usr/bin/tar -I 'zstd -v -T0 -11'"
alias tzst19="/usr/bin/tar -I 'zstd -v -T0 -19'"
alias tzst22="/usr/bin/tar -I 'zstd -v -T0 -19'"

# this export only makes sense in the interactive sessions
# replaces {,c}cmake() functions/aliases to set default generator
export CMAKE_GENERATOR=Ninja

function mkcd() {
	mkdir -pv "$1" && cd "$1"
}

function tmpcd() {
	local name
	name="$(date +'%FT%H-%M-%S%z')" || return
	mkdir -pv "$HOME/tmp/tmp-$name" || return
	cd "$HOME/tmp/tmp-$name"
}
alias tmp='tmpcd'

function make() {
	local has_jobs= has_makefile=
	for arg; do
		case "$arg" in
		-j*|--jobs*) has_jobs=1 ;;
		-f*|--file*|--makefile*) has_makefile=1 ;;
		esac
	done
	if [[ -e GNUmakefile || -e Makefile || -e makefile ]]; then
		has_makefile=1
	fi

	local extra_args=()
	if ! [[ $has_jobs ]]; then
		extra_args+=( -j$(nproc) )
	fi
	if ! [[ $has_makefile ]]; then
		extra_args+=( -f ~/bin/devel/Makefile )
	fi
	-trace command make "${extra_args[@]}" "$@"
}

function vimw() {
	local -a args
	local arg 
	while (( $# )); do
		case "$1" in
		--) args+=("$1"); shift; break ;;
		-*) args+=("$1") ;;
		*/*) args+=("$1") ;;
		*) args+=("$(command -v "$1" || echo "$1")") ;;
		esac
		shift
	done
	while (( $# )); do
		case "$1" in
		*/*) args+=("$1") ;;
		*) args+=("$(command -v "$1" || echo "$1")") ;;
		esac
		shift
	done
	-trace vim "${args[@]}"
}
compdef vimw=vim

function strip-color() {
	sed -r $'s/\x1b\x5b[[0-9;]+m//g'
}

# I don't use Boost.Build
alias b2='backblaze-b2'

# OpenStack things
# create an image with UEFI boot mode (works for OVH)
#   * for future me: openstack-image-create-uefi --progress --private --disk-format qcow2
alias openstack-image-create-uefi="openstack image create \
	--property hw_firmware_type='uefi' \
	--property hw_qemu_guest_agent='yes' \
	--property hw_disk_bus='scsi' \
	--property hw_scsi_model='virtio-scsi' \
	--property hypervisor_type='qemu' \
"


# ------------------------------------------------------------------------------
# Compile flags
# "The shell madness expands to meet the needs of the expanding shell madness"
#                                                         -- O. Wilde, probably
# ------------------------------------------------------------------------------

function clearflags() {
	unset CC CXX CPPFLAGS CFLAGS CXXFLAGS LDFLAGS RUSTFLAGS ${(kM)parameters:#CARGO_PROFILE_*} 2>/dev/null
	return 0
}

function printflags() {
	declare -p CC CXX CPPFLAGS CFLAGS CXXFLAGS LDFLAGS RUSTFLAGS ${(kM)parameters:#CARGO_PROFILE_*} 2>/dev/null
	return 0
}


#
# loadflags_*() family -- use /etc/makepkg.conf to source flags
#

function --loadflags() {
	local mangle='
shopt -s extglob
shopt -s lastpipe
strip_repeat() {
	local flag="$1";
	perl <<<"${var}" -pe "s/ ${flag}(?=.* ${flag})//g" | IFS= read -r var;
}
__do_mangle() {
	declare -n var="$1"; shift
	for fn; do if [[ "$(type -t "$fn")" == function ]]; then "$fn"; break; fi; done
}
__do_mangle CFLAGS    mangle
__do_mangle CXXFLAGS  mangle
__do_mangle LDFLAGS   mangle_ld mangle
__do_mangle RUSTFLAGS mangle_rust mangle

# clean up repeated -O*
mangle() {
	strip_repeat "-O[^ ]*";
}
__do_mangle CFLAGS mangle
__do_mangle CXXFLAGS mangle

declare -p CC CXX CPPFLAGS CFLAGS CXXFLAGS LDFLAGS RUSTFLAGS "${!CARGO_PROFILE_@}" 2>/dev/null \
| sed -nr "s|^declare (-[^ ]+ )+|export |p"
'
	local -a lines=('. /etc/makepkg.conf' "$@" "$mangle")
	clearflags
	eval "$(bash -c "${(F)lines}")"
	printflags
}

function loadflags_opt() {
	--loadflags
}

function loadflags_opt3() {
	--loadflags '
mangle() { var="${var// -O+([0-9])}"; var+=" -O3"; }
'
}

function loadflags_lto() {
	--loadflags '
mangle() { var+=" $LTOFLAGS"; }
mangle_rust() { var+=" $LTO_RUSTFLAGS"; }
export ${LTO_CARGOFLAGS:-"CARGO_PROFILE_RELEASE_LTO=true"}
'
}

function loadflags_lto3() {
	--loadflags '
mangle() { var="${var// -O+([0-9])}"; var+=" -O3"; var+=" $LTOFLAGS"; }
mangle_rust() { var="${var// -C*( )opt-level=+([0-9])}"; var+=" -C opt-level=3"; var+=" $LTO_RUSTFLAGS"; }
export ${LTO_CARGOFLAGS:-"CARGO_PROFILE_RELEASE_LTO=on"}
'
}

function loadflags_dbg() {
	--loadflags '
CFLAGS+=" $DEBUG_CFLAGS"
CXXFLAGS+=" $DEBUG_CXXFLAGS"
RUSTFLAGS+=" $DEBUG_RUSTFLAGS"
export ${DEBUG_CARGOFLAGS:-"CARGO_PROFILE_RELEASE_DEBUG=full"}
'
}

function loadflags_clang_opt() {
	--loadflags '
CC=clang
CXX=clang++
mangle() { var="${var// -fuse-ld=+([^ ])}"; }
mangle_ld() { var="${var// -fuse-ld=+([^ ])}"; var+=" -fuse-ld=lld"; }
'
}

function loadflags_clang_dbg() {
	--loadflags '
CC=clang
CXX=clang++
CFLAGS+=" $DEBUG_CFLAGS"
CXXFLAGS+=" $DEBUG_CXXFLAGS"
RUSTFLAGS+=" $DEBUG_RUSTFLAGS"
mangle() { var="${var// -fuse-ld=+([^ ])}"; }
mangle_ld() { var="${var// -fuse-ld=+([^ ])}"; var+=" -fuse-ld=lld"; }
export ${DEBUG_CARGOFLAGS:-"CARGO_PROFILE_RELEASE_DEBUG=full"}
'
}

function loadflags_clang_lto() {
	--loadflags '
CC=clang
CXX=clang++
mangle() { var="${var// -fuse-ld=+([^ ])}"; var+=" -flto=full"; }
mangle_ld() { var="${var// -fuse-ld=+([^ ])}"; var+=" -fuse-ld=lld -flto=full"; }
mangle_rust() { var="${var// -C*( )link-arg=-fuse-ld=+([^ ])}"; var+=" -C linker=clang -C link-arg=-fuse-ld=lld -C linker-plugin-lto"; }
CARGO_PROFILE_RELEASE_LTO=fat
'
}

function loadflags_clang_lto3() {
	--loadflags '
CC=clang
CXX=clang++
mangle() { var="${var// -O+([0-9])}"; var="${var// -fuse-ld=+([^ ])}"; var+=" -O3 -flto=full"; }
mangle_ld() { var="${var// -fuse-ld=+([^ ])}"; var+=" -fuse-ld=lld -flto=full"; }
mangle_rust() { var="${var// -C*( )opt-level=+([0-9])}"; var="${var// -C*( )link-arg=-fuse-ld=+([^ ])}"; var+=" -C opt-level=3 -C linker=clang -C link-arg=-fuse-ld=lld -C linker-plugin-lto"; }
CARGO_PROFILE_RELEASE_LTO=fat
'
}

function loadflags_clang_thinlto() {
	--loadflags '
CC=clang
CXX=clang++
mangle() { var="${var// -O+([0-9])}"; var="${var// -fuse-ld=+([^ ])}"; var+=" -flto=thin"; }
mangle_ld() { var="${var// -fuse-ld=+([^ ])}"; var+=" -fuse-ld=lld -flto=thin"; }
mangle_rust() { var="${var// -C*( )link-arg=-fuse-ld=+([^ ])}"; var+=" -C linker=clang -C link-arg=-fuse-ld=lld -C linker-plugin-lto"; }
CARGO_PROFILE_RELEASE_LTO=thin
'
}

function loadflags_clang_thinlto3() {
	--loadflags '
CC=clang
CXX=clang++
mangle() { var="${var// -O+([0-9])}"; var="${var// -fuse-ld=+([^ ])}"; var+=" -O3 -flto=thin"; }
mangle_ld() { var="${var// -fuse-ld=+([^ ])}"; var+=" -fuse-ld=lld -flto=thin"; }
mangle_rust() { var="${var// -C*( )opt-level=+([0-9])}"; var="${var// -C*( )link-arg=-fuse-ld=+([^ ])}"; var+=" -C opt-level=3 -C linker=clang -C link-arg=-fuse-ld=lld -C linker-plugin-lto"; }
CARGO_PROFILE_RELEASE_LTO=thin
'
}


#
# setflags_*() -- hardcoded sets of -fomg-optimize flags
#

function setflags_opt() {
	export CFLAGS="-march=native -O3 -pipe -fno-plt"
	export CXXFLAGS="$CFLAGS"
	export LDFLAGS="$CFLAGS -Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now -fuse-ld=mold"
}

function setflags_lto() {
	export CFLAGS="-march=native -O3 -pipe -fno-plt -flto=auto -fuse-linker-plugin"
	export CXXFLAGS="$CFLAGS"
	export LDFLAGS="$CFLAGS -Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now -fuse-ld=mold -flto=auto -fuse-linker-plugin"
}

function setflags_dbg() {
	export CFLAGS="-march=native -Og -ggdb3 -pipe -fno-plt -fexceptions -Wp,-D_FORTIFY_SOURCE=3 -Wformat -Werror=format-security -fstack-clash-protection -fcf-protection"
	export CXXFLAGS="$CFLAGS -Wp,-D_GLIBCXX_ASSERTIONS"
	export LDFLAGS="-Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now -fuse-ld=mold"
}


#
# Go flags adapters (because of course Go is special)
#

function cleargoflags() {
	unset CGO_CPPFLAGS CGO_CFLAGS CGO_CXXFLAGS CGO_LDFLAGS GOFLAGS 2>/dev/null
	return 0
}

function printgoflags() {
	declare -p CGO_CPPFLAGS CGO_CFLAGS CGO_CXXFLAGS CGO_LDFLAGS GOFLAGS 2>/dev/null
	return 0
}

function -setgoflags() {
	export CGO_CPPFLAGS="${CPPFLAGS}"
	export CGO_CFLAGS="${CFLAGS}"
	export CGO_CXXFLAGS="${CXXFLAGS}"
	export CGO_LDFLAGS="${LDFLAGS}"
	export GOFLAGS="-buildmode=pie -trimpath '-ldflags=-linkmode=external \"-extldflags=${LDFLAGS}\"' -mod=readonly -modcacherw"
	printgoflags
}

for s in {,clang_}{dbg,opt{,3},lto,lto{,3}}; do
	eval "function loadgoflags_$s() { loadflags_$s; -setgoflags; }"
done
unset s


#
# Misc functions for development
#

function setnocache() {
	path=( ${path:#*/ccache/*} )
	path=( ${path:#*/sccache/*} )
	unset RUSTC_WRAPPER
}
