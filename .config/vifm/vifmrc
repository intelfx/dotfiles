" vim: filetype=vifm :
" Sample configuration file for vifm (last updated: 3 April, 2023)
" You can edit this file by hand.
" The " character at the beginning of a line comments out the line.
" Blank lines are ignored.
" The basic format for each item is shown with an example.

" ------------------------------------------------------------------------------
" Main settings
" ------------------------------------------------------------------------------

" Command used to edit files in various contexts.  The default is vim.
" If you would like to use another vi clone such as Elvis or Vile
" you will need to change this setting.
if $EDITOR != '' && executable($EDITOR)
    echo 'Note: using `'.$EDITOR.'` as an editor'
    let &vicmd = $EDITOR
elseif executable('nvim')
    set vicmd=nvim
elseif executable('vim')
    set vicmd=vim
elseif executable('vi')
    set vicmd=vi
endif

" This makes vifm perform file operations on its own instead of relying on
" standard utilities like `cp`.  While using `cp` and alike is a more universal
" solution, it's also much slower when processing large amounts of files and
" doesn't support progress measuring.
set syscalls
set iooptions=fastfilecloning,datasync

" Enable mouse support
set mouse=a

" Trash Directory
" The default is to move files that are deleted with dd or :d to
" the trash directory.  If you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" I recommend not changing this until you are familiar with vifm.
" This probably shouldn't be an option.
set trash

" What should be saved automatically on restarting vifm.  Drop "savedirs"
" value if you don't want vifm to remember last visited directories for you.
set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
            \phistory,fhistory,dirstack,registers,bookmarks,bmarks

" This is how many directories to store in the directory history.
set history=100

" Automatically resolve symbolic links on l or Enter.
set nofollowlinks

" Natural sort of (version) numbers within text.
set sortnumbers

" Maximum number of changes that can be undone.
set undolevels=1000000

" Use Vim's format of help file (has highlighting and "hyperlinks").
" If you would rather use a plain text help file set novimhelp.
set vimhelp

" If you would like to run an executable file when you
" press Enter, l or Right Arrow, set this.
set norunexec

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.
set timefmt='%Y-%m-%d %H:%M'

" Show list of matches on tab completion in command-line mode
set wildmenu

" Display completions in a form of popup with descriptions of the matches
set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase
" letter
set ignorecase
set smartcase

" Don't highlight search results automatically
set hlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists
set scrolloff=4

" Don't do too many requests to slow file systems
if !has('win')
    set slowfs=curlftpfs,sshfs
endif

" Set custom cpoptions (!f for intuitive :filter)
set cpoptions=st

" Set custom status line look
set statusline="  Hint: %z%= %A %10u:%-7g %15s   [FREE %a] %20d  "

" List of color schemes to try (picks the first one supported by the terminal)
colorscheme solarized-dark

" ------------------------------------------------------------------------------
" Bookmarks
" ------------------------------------------------------------------------------

" :mark mark /full/directory/path [filename]

mark b ~/bin/
mark h ~/

" ------------------------------------------------------------------------------
" Commands
" ------------------------------------------------------------------------------

" :com[mand][!] command_name action
"
" These are some of the macros that can be used in the action part:
"  %a for user arguments
"  %c for current file under the cursor
"  %C for current file under the cursor of inactive pane
"  %f for selected file(s)
"  %F for selected file(s) of inactive pane
"  %b is the same as %f %F
"  %d for current directory name
"  %D for current directory name of inactive pane
"  %r{x} for list of files in register {x}
"  %m runs the command in a menu window
"  %u uses command's output to build a file list
"  see `:help vifm-macros` and `:help vifm-filename-modifiers` for more

command! df df -h %m 2> /dev/null
command! diff vim -d %f %F
command! zip zip -r %c.zip %f
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! vgrep vim "+grep %a"
command! reload :write | restart full

" ------------------------------------------------------------------------------
" File types association
" ------------------------------------------------------------------------------

" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
"
" The first entry is the default program to be used with a matching file.
" The other programs for the file type can be accessed via :file command.
" The command macros like %f, %F, %d, %D may be used in the commands.
" The %a macro is ignored.  To use a % you must put %%.
" Spaces in an app name must be escaped, for example: QuickTime\ Player.app

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of the following formats:
"
" :filetype patterns FUSE_MOUNT|mount_cmd %SOURCE_FILE %DESTINATION_DIR
"
" %SOURCE_FILE and %DESTINATION_DIR are filled in at runtime.
"
" Example:
"   :filetype *.zip,*.[jwe]ar FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype patterns FUSE_MOUNT2|mount_cmd %PARAM %DESTINATION_DIR
"
" %PARAM and %DESTINATION_DIR are filled in at runtime.
"
" Example:
"   :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
"
" %PARAM value is the first line of the matched file, example: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.  There is also %FOREGROUND, which is useful for entering passwords.

" Pdf
filextype {*.pdf},<application/pdf> zathura %c %i, apvlv %c, xpdf %c
fileviewer {*.pdf},<application/pdf> pdftotext -nopgbrk %c -

" PostScript
filextype {*.ps,*.eps,*.ps.gz},<application/postscript>
        \ {View in zathura}
        \ zathura %f,
        \ {View in gv}
        \ gv %c %i,

" Djvu
filextype {*.djvu},<image/vnd.djvu>
        \ {View in zathura}
        \ zathura %f,
        \ {View in apvlv}
        \ apvlv %f,

" Midi
filetype {*.mid,*.kar}
       \ {Play using TiMidity++}
       \ timidity %f,

" Audio
filetype {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus,
         \*.aac,*.mpga},
        \<audio/*>
       \ {Play using MPlayer}
       \ mplayer %f,
       \ {Play using mpv}
       \ mpv --no-video %f %s,
       \ {Play using ffplay}
       \ ffplay -nodisp -hide_banner -autoexit %c,
fileviewer {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus,
           \*.aac,*.mpga},
          \<audio/*>
         \ ffprobe -hide_banner -pretty %c 2>&1

" Video
filextype {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
          \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
          \*.as[fx],*.unknown_video},
         \<video/*>
        \ {View using ffplay}
        \ ffplay -fs -hide_banner -autoexit %f,
        \ {View using Dragon}
        \ dragon %f:p,
        \ {View using mplayer}
        \ mplayer %f,
        \ {Play using mpv}
        \ mpv --no-video %f,
fileviewer {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
           \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
           \*.as[fx],*.unknown_video},
          \<video/*>
         \ ffprobe -hide_banner -pretty %c 2>&1

" Web
filextype {*.xhtml,*.html,*.htm},<text/html>
        \ {Open with qutebrowser}
        \ qutebrowser %f %i,
        \ {Open with firefox}
        \ firefox %f &,
filetype {*.xhtml,*.html,*.htm},<text/html> links, lynx

" Object
filetype {*.o},<application/x-object> nm %f | less

" Man page
filetype /\\.([0-9n]|[0-9][a-z]{1,9})(\\.(gz|[zZ]|bz2|xz|lzma|lz|zst|zstd))?$/,<text/troff>
        \ batman ./%c
fileviewer /\\.([0-9n]|[0-9][a-z]{1,9})(\\.(gz|[zZ]|bz2|xz|lzma|lz|zst|zstd))?$/,<text/troff>
        \ -batman-preview --terminal-width=%pw ./%c

" Images
filextype {*.svg,*.svgz},<image/svg+xml>
        \ {Edit in Inkscape}
        \ inkscape %f,
        \ {View in Inkview}
        \ inkview %f,
filextype {*.cr2}
        \ {Open in Darktable}
        \ darktable %f,
        \ {Open in RawTherapee}
        \ rawtherapee %f,
filextype {*.xcf}
        \ {Open in GIMP}
        \ gimp %f,
filextype {.kra}
        \ {Open in Krita}
        \ krita %f,
filextype {.blend}
        \ {Open in Blender}
        \ blender %c,
filextype {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm},<image/*>
        \ {View in sxiv}
        \ sxiv %f,
        \ {View in gpicview}
        \ gpicview %c,
        \ {View in shotwell}
        \ shotwell,
fileviewer {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm},<image/*>
         \ identify %f

" OpenRaster
filextype *.ora
        \ {Edit in MyPaint}
        \ mypaint %f,

" Mindmap
filextype *.vym
        \ {Open with VYM}
        \ vym %f &,

" MD5
filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,

" SHA1
filetype *.sha1
       \ {Check SHA1 hash sum}
       \ sha1sum -c %f %S,

" SHA256
filetype *.sha256
       \ {Check SHA256 hash sum}
       \ sha256sum -c %f %S,

" SHA512
filetype *.sha512
       \ {Check SHA512 hash sum}
       \ sha512sum -c %f %S,

" GPG signature
filetype {*.asc},<application/pgp-signature>
       \ {Check signature}
       \ !!gpg --verify %c,

" Torrent
filetype {*.torrent},<application/x-bittorrent> ktorrent %f &
fileviewer {*.torrent},<application/x-bittorrent>
         \ dumptorrent -v %c,
         \ transmission-show %c

" FuseZipMount
filetype {*.zip,*.jar,*.war,*.ear,*.oxt,*.apkg},
        \<application/zip,application/java-archive>
       \ {Mount with fuse-zip}
       \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
       \ {View contents}
       \ unzip -l %f | less,
       \ {Extract here}
       \ unzip %c,
fileviewer {*.zip,*.jar,*.war,*.ear,*.oxt},
          \<application/zip,application/java-archive>
         \ unzip -l %f

" ArchiveMount
filetype {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz,*.tar.zst,
         \*.tzst},
        \<application/x-tar>
       \ {Mount with archivemount}
       \ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.tgz,*.tar.gz tar -tzf %c
fileviewer *.tar.bz2,*.tbz2 tar -tjf %c
fileviewer *.tar.xz,*.txz tar -tJf %c
fileviewer *.tar.zst,*.tzst tar -t --zstd -f %c
fileviewer {*.tar},<application/x-tar> tar -tf %c

" Rar2FsMount and rar archives
filetype {*.rar},<application/x-rar>
       \ {Mount with rar2fs}
       \ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR,
fileviewer {*.rar},<application/x-rar> unrar v %c

" IsoMount
filetype {*.iso},
        \<application/x-iso9660-image,
         \application/vnd.efi.iso>
       \ {Mount with fuseiso}
       \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,

" SshMount
filetype *.ssh
       \ {Mount with sshfs}
       \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND,

" FtpMount
filetype *.ftp
       \ {Mount with curlftpfs}
       \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND,

" Fuse7z and 7z archives
filetype {*.7z},<application/x-7z-compressed>
       \ {Mount with fuse-7z}
       \ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR,
fileviewer {*.7z},<application/x-7z-compressed> 7z l %c

" Office files
filextype {*.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx,*.ppt},
         \<application/vnd.openxmlformats-officedocument.*,
          \application/msword,
          \application/vnd.ms-excel>
        \ libreoffice %f &
fileviewer {*.doc},<application/msword> catdoc %c
fileviewer {*.docx},
          \<application/
           \vnd.openxmlformats-officedocument.wordprocessingml.document>
         \ docx2txt.pl %f -

" TuDu files
filetype *.tudu tudu -f %c

" Qt projects
filextype *.pro qtcreator %f &

" Directories
filextype */
        \ {View in thunar}
        \ Thunar %f &,

" Syntax highlighting in preview
"
" Explicitly set highlight type for some extensions
"
" 256-color terminal
" fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
" fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
"
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" Or leave it for automatic detection
" fileviewer *[^/] pygmentize -O style=monokai -f console256 -g
"
" Use bat for all other previews
" TODO: somehow recognize parent MIME types such that all of the application/*
"       mime-types which are just flavors of text/plain get recognized as such
fileviewer <text/*>
        \,<application/x-shellscript>
        \,<application/x-desktop>
        \,<application/xml>
        \,<application/json>
        \,<application/yaml>
        \ bat --style=grid,,numbers,,changes --color=always --paging=never --wrap=auto --terminal-width=%pw %c
" If this is not a regular text file, use verbose output
" TODO: use a better file size limit in place of `--line-range :1000`
fileviewer {{*[^/]}}
        \ bat --show-all --line-range :1000 --style=full --color=always --paging=never --wrap=auto --terminal-width=%pw %c

" Displaying pictures in terminal
" fileviewer *.jpg,*.png shellpic %c

" Open all other files with default system programs (you can also remove all
" :file[x]type commands above to ensure they don't interfere with system-wide
" settings).  By default all unknown files are opened with 'vi[x]cmd'
" uncommenting one of lines below will result in ignoring 'vi[x]cmd' option
" for unknown file types.
" For *nix:
" filetype * xdg-open
" For OS X:
" filetype * open
" For Windows:
" filetype * explorer %"f &

" ------------------------------------------------------------------------------
" Panel configuration examples
" ------------------------------------------------------------------------------


"set lsview  " see binding below
set lsoptions+=transposed
set lsoptions+=columncount:2
set viewcolumns=-60%{name},-20%{size},{mtime}

" Customize view columns a bit (enable ellipsis for truncated file names)
" set viewcolumns=-{name}..,6{}.

" Show vertical and horizontal borders
set fillchars=vborder:│,hborder:─

" Filter-out build and temporary files
" filter! {*.lo,*.o,*.d,*.class,*.pyc,*.pyo,.*~}

" ------------------------------------------------------------------------------
" Sample keyboard mappings
" ------------------------------------------------------------------------------

" Activate "ls view"
nnoremap ,ls :set lsview!<cr>

" Start shell in current directory
nnoremap ,S :shell<cr>

" Display sorting dialog
nnoremap S :sort<cr>

" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

" Exit all traces of view mode (whether after `:view<S-Tab>` or `e`)
qnoremap q q:set noquickview<cr>
qnoremap Q q:set noquickview<cr>
" (normal `q` is a leader for some built-in mappings, so bind `qq` instead
"  to catch rage-presses, as well as `Q` in both modes for uniformity)
nnoremap qq :set noquickview<cr>
nnoremap Q :set noquickview<cr>

if $DISPLAY && executable('gvim')
    " Open file in existing instance of gvim
    nnoremap o :!gvim --remote-tab-silent %f<cr>
    " Open file in new instance of gvim
    nnoremap O :!gvim %f<cr>
endif

" Insert file name(s) under cursor or selection onto command line (vinegar.vim)
nnoremap .     :<C-U><Space><C-R>=expand("%f:p:.")<CR><Home>

" Same, but mc style (Alt-Enter)
nnoremap <CR> :<C-U><Space><C-R>=expand("%f:p:.")<CR><Home>
cnoremap <CR> <C-R>=expand("%f:p:.")<CR><Space>

" Build a command to open current file(s) as an argument
nmap     g!    .!

" Build a command to run current file as an executable
nnoremap g<CR> :<C-U>!./<C-R>=expand("%c:p:.")<CR>

" Open file in the background using its default program
nnoremap gb :file &<cr>l

" HACK: Vifm has no way to run a program connected to the tty without blanking
" (with the implied promise that the program won't mess up the UI). To work
" around this, query Vifm's true tty once on startup and redirect manually.
if $VIFM_TTY == ''
    let $VIFM_TTY = term("tty")
endif

" Interaction with system clipboard
if has('win')
    " Yank current directory path to Windows clipboard with forward slashes
    nnoremap yp :!echo %"d:gs!\!/! %i | clip<cr>
    " Yank path to current file to Windows clipboard with forward slashes
    nnoremap yf :!echo %"c:gs!\!/! %i | clip<cr>
elseif executable('clip')
    " Yank current directory path
    nnoremap yd :!echo -n %d | clip --both -i >$VIFM_TTY &<cr>
    " Yank current file path
    nnoremap yf :!echo -n %c:p | clip --both -i >$VIFM_TTY &<cr>
    " Yank file paths under cursor or selection (vinegar.vim)
    nnoremap y. :!printf "%%s\n" %f:p | clip --both -i >$VIFM_TTY &<cr>
elseif $WAYLAND_DISPLAY && executable('wl-copy')
    " Yank current directory path into primary and selection clipboards
    nnoremap yd :!echo -n %d | wl-copy %i &&
                \ echo -n %d | wl-copy -p %i<cr>
    " Yank current file path into into primary and selection clipboards
    nnoremap yf :!echo -n %c:p | wl-copy %i &&
                \ echo -n %c:p | wl-copy -p %i<cr>
    " Yank file paths under cursor or selection (vinegar.vim)
    nnoremap y. :!printf "%%s\n" %f:p | wl-copy %i &&
                \ printf "%%s\n" %f:p | wl-copy -p %i<cr>
elseif $DISPLAY && executable('xclip')
    " Yank current directory path into the clipboard
    nnoremap yd :!echo %d | xclip %i<cr>
    " Yank current file path into the clipboard
    nnoremap yf :!echo %c:p | xclip %i<cr>
    " Yank file paths under cursor or selection (vinegar.vim)
    nnoremap y. :!printf "%%s\n" %f:p | xclip %i<cr>
elseif $DISPLAY && executable('xsel')
    " Yank current directory path into primary and selection clipboards
    nnoremap yd :!echo -n %d | xsel --input --primary %i &&
                \ echo -n %d | xsel --input --clipboard %i<cr>
    " Yank current file path into into primary and selection clipboards
    nnoremap yf :!echo -n %c:p | xsel --input --primary %i &&
                \ echo -n %c:p | xsel --input --clipboard %i<cr>
    " Yank file paths under cursor or selection (vinegar.vim)
    nnoremap y. :!printf "%%s\n" %f:p | xsel --input --primary %i &&
                \ printf "%%s\n" %f:p | xsel --input --clipboard %i<cr>
endif

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw

" As above, but without the file extension
" nnoremap I cW<c-a>
" nnoremap cc cW<c-u>
" nnoremap A cW

" Open console in current directory
if $DISPLAY && executable('xterm')
    nnoremap ,t :!xterm &<cr>
elseif $TERMINAL
    nnoremap ,t :!$TERMINAL &<cr>
endif

" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap ,e :write | edit $MYVIFMRC | restart full<cr>
nnoremap ,r :write | restart full<cr>

" Open gvim to edit vifmrc
if ($WAYLAND_DISPLAY != '' || $DISPLAY != '') && executable('gvim')
    nnoremap ,E :!gvim --remote-tab-silent $MYVIFMRC &<cr>
endif

" Toggle wrap setting on ,w key
nnoremap ,w :set wrap!<cr>

" Example of standard two-panel file managers mappings
nnoremap <f3> :set quickview<cr><s-tab>
nnoremap <f4> :edit<cr>
nnoremap <f5> :copy<cr>
vnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
vnoremap <f6> :move<cr>
nnoremap <f7> :mkdir<space>
nnoremap <f8> :delete<cr>

" Alternative copy/move
" nnoremap <f5> Y<tab>p<tab>
" nnoremap <f6> Y<tab>P<tab>
nnoremap <s-f6> cw
nnoremap <s-f5> Yp

nnoremap <c-s> :sort<CR>
nnoremap <c-f3> :set sort=+name<CR>
nnoremap <c-f4> :set sort=+ext,+name<CR>
nnoremap <c-f5> :set sort=-mtime<CR>
nnoremap <c-f6> :set sort=-size<CR>
nnoremap <c-f8> :set sort=-ctime<CR>

" Midnight commander alike mappings
" Open current directory in the other pane
nnoremap <a-i> :sync<cr>
" Open directory under cursor in the other pane
nnoremap <a-o> :sync %c<cr>
" Swap panes
nnoremap <a-u> <c-w>x

" ---
" More mappings
" ---

" Quit
nnoremap <F10> :q<CR>

" Select file under cursor and go to next
nnoremap <space> tj
nnoremap <Insert> tj

" Bookmarks menu
nnoremap <c-\> :bmarks<cr>

" SelectAll
nnoremap * ggVG<cr>

" CdUp
nnoremap <bs> gh
nnoremap - gh

" ------------------------------------------------------------------------------
" Editing
" ------------------------------------------------------------------------------

command! Vimp vim -p %f
command! Vimo vim -o %f
command! VimO vim -O %f
command! Vimdiff vimdiff %b

nnoremap ,V :edit<CR>
nnoremap ,vp :Vimp %f<CR>
nnoremap ,vo :Vimo %f<CR>
nnoremap ,vO :VimO %f<CR>
nnoremap ,vd :Vimdiff %b<CR>

" ------------------------------------------------------------------------------
" Navigation mappings (fzf-powered, see below)
" ------------------------------------------------------------------------------

" cd
nnoremap ,c :Fzfcd<CR>
nnoremap ,C :Fzfrcd<CR>
" goto (search)
nnoremap ,/ :Fzfgoto<CR>
nnoremap ,g :Fzfgoto<CR>
nnoremap ,G :Fzfrgoto<CR>
" locate directory
nnoremap ,ld :Fzfindd<CR>
" locate file
nnoremap ,lf :Fzfindf<CR>

" navigate to (one-stop-shop convenience binding)
nnoremap ,, :Fzfnav<CR>
nnoremap ,<CR> :Fzfrnav<CR>

" back home
nnoremap ,~ :cd<CR>
nnoremap ~~ :cd<CR>

" TODO: better binding?
nnoremap \ /<C-Y>
" XXX: C-/
nnoremap  /<C-Y>

" ------------------------------------------------------------------------------
" Quick integration mappings
" ------------------------------------------------------------------------------

" tig integration
nnoremap ,tig :!tig %l<CR>
nnoremap ,sm :!sm %l &<CR>

" ------------------------------------------------------------------------------
" Various customization examples
" ------------------------------------------------------------------------------

" Use ag (the silver searcher) instead of grep
" set grepprg='ag --line-numbers %i %a %s'

if executable('rg')
        set grepprg='rg -n -H %i %a %s'
endif

" Add additional place to look for executables
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"     vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
"
let $VIFM_SERVER_NAME = v:servername

" Activate screen/tmux support
if $TMUX != ''
    screen!
endif

" Set a better FUSE mount root
if $XDG_RUNTIME_DIR != ''
    let &fusehome = $XDG_RUNTIME_DIR . '/vifm/'
else
    let &fusehome = $HOME . '/mnt/'
endif

" ------------------------------------------------------------------------------
" fzf/tmux integration
" ------------------------------------------------------------------------------

if $VIFM_FZF == '' && executable('fzf') && $TMUX != '' && executable('fzf-tmux')
    " TODO: reuse as much of ftb-tmux-popup as possible (position computation)
    let $VIFM_FZF = 'fzf-tmux -p'
    let $VIFM_FZF_FN = 'system'
endif

if $VIFM_FZF == '' && executable('fzf')
    let $VIFM_FZF = 'fzf'
    let $VIFM_FZF_FN = 'term'
endif

if $VIFM_FD == '' && executable('-fd-compgen')
    " see github.com/intelfx/bin
    " this is basically a piece of ~/.zshrc.d/fzf, extracted into a bash script
    let $VIFM_FD = '-fd-compgen'
endif

let $VIFM_FZF_OPTS = ' --ansi --bind=tab:down,btab:up,change:top,ctrl-space:toggle,bspace:backward-delete-char/eof,ctrl-h:backward-delete-char/eof --cycle --tiebreak=begin --color bg+:0,bg:8,spinner:6,hl:14:bold:reverse,fg:12,header:4,info:3,pointer:6,marker:6,fg+:7,prompt:3,hl+:14:bold:reverse'
let $VIFM_FD_OPTS = ' --color=always'

if $VIFM_FZF != '' && $VIFM_FD != ''

    command! Fzf   : set noquickview
                  \| if $VIFM_FZF_FN == 'system'
                  \|    let $VIFM_FZF_PICK = system($VIFM_FZF_CMD . ' 2>/dev/null')
                  \| else
                  \|    let $VIFM_FZF_PICK = term($VIFM_FZF_CMD . ' 2>/dev/tty')
                  \| endif
                  \| if $VIFM_FZF_PICK != ''
                  \|     if $VIFM_FZF_ACTION == 'auto'
                  \|         let $VIFM_FZF_ACTION = system('[[ -d ' . fnameescape($VIFM_FZF_PICK) . ' ]] && echo cd || echo goto')
                  \|     endif
                  \|     execute $VIFM_FZF_ACTION fnameescape($VIFM_FZF_PICK)
                  \| endif

    command! Fzfcd :
                  \| let $VIFM_FZF_CMD = $VIFM_FD . $VIFM_FD_OPTS . ' -d1 -td' . ' | ' . $VIFM_FZF . $VIFM_FZF_OPTS
                  \| let $VIFM_FZF_ACTION = 'cd'
                  \| execute 'Fzf'
    command! Fzfrcd :
                  \| let $VIFM_FZF_CMD = $VIFM_FD . $VIFM_FD_OPTS . ' -td' . ' | ' . $VIFM_FZF . $VIFM_FZF_OPTS
                  \| let $VIFM_FZF_ACTION = 'cd'
                  \| execute 'Fzf'

    command! Fzfgoto :
                  \| let $VIFM_FZF_CMD = $VIFM_FD . $VIFM_FD_OPTS . ' -d1' . ' | ' . $VIFM_FZF . $VIFM_FZF_OPTS
                  \| let $VIFM_FZF_ACTION = 'goto'
                  \| execute 'Fzf'
    command! Fzfrgoto :
                  \| let $VIFM_FZF_CMD = $VIFM_FD . $VIFM_FD_OPTS . ' | ' . $VIFM_FZF . $VIFM_FZF_OPTS
                  \| let $VIFM_FZF_ACTION = 'goto'
                  \| execute 'Fzf'

    command! Fzfnav :
                  \| let $VIFM_FZF_CMD = $VIFM_FD . $VIFM_FD_OPTS . ' -d1' . ' | ' . $VIFM_FZF . $VIFM_FZF_OPTS
                  \| let $VIFM_FZF_ACTION = 'auto'
                  \| execute 'Fzf'
    command! Fzfrnav :
                  \| let $VIFM_FZF_CMD = $VIFM_FD . $VIFM_FD_OPTS . ' | ' . $VIFM_FZF . $VIFM_FZF_OPTS
                  \| let $VIFM_FZF_ACTION = 'auto'
                  \| execute 'Fzf'

    command! Fzfindd :
                  \| let $VIFM_FZF_CMD = $VIFM_FD . $VIFM_FD_OPTS . ' -td $HOME' . ' | ' . $VIFM_FZF . $VIFM_FZF_OPTS
                  \| let $VIFM_FZF_ACTION = 'cd'
                  \| execute 'Fzf'
    command! Fzfindf :
                  \| let $VIFM_FZF_CMD = $VIFM_FD . $VIFM_FD_OPTS . ' -tf $HOME' . ' | ' . $VIFM_FZF . $VIFM_FZF_OPTS
                  \| let $VIFM_FZF_ACTION = 'goto'
                  \| execute 'Fzf'
endif

" ------------------------------------------------------------------------------
" Icon decorations example
" ------------------------------------------------------------------------------

" https://github.com/cirala/vifm_devicons
