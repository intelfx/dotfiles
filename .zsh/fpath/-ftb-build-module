#!/hint/zsh
emulate -LR zsh -o extended_glob -o err_return

local zsh_version=${1:-${FZF_TAB_ZSH_SRC_VERSION:-$ZSH_VERSION}}

# macos check
local ret bundle nproc
[[ $OSTYPE == darwin* ]] && {
  [[ -n ${module_path[1]}/**/*.bundle(#qN) ]] && bundle=true
  nproc=$(sysctl -n hw.logicalcpu)
} || {
  nproc=$(nproc)
}

# clone zsh source code if not exists
zsh_url=https://github.com/zsh-users/zsh
zsh_tag=zsh-$zsh_version
zsh_src=$PWD/zsh
[[ ! -d $zsh_src || -d $zsh_src/.git ]] \
  || rm -rf $zsh_src
[[ -d $zsh_src ]] \
  || git clone --depth=1 https://github.com/zsh-users/zsh $zsh_src --branch $zsh_tag
git -C $zsh_src rev-parse --verify --quiet $zsh_tag &>/dev/null \
  || git -C $zsh_src fetch --depth 1 $zsh_url tag $zsh_tag --no-tags
git -C $zsh_src describe --tags --exact-match --match $zsh_tag HEAD &>/dev/null \
  || git -C $zsh_src checkout -f $zsh_tag
git -C $zsh_src clean -fxd

{
ln -rsf $PWD/Src/fzftab.c   -t $zsh_src/Src/Modules/
ln -rsf $PWD/Src/fzftab.mdd -t $zsh_src/Src/Modules/

# build zsh
cd -q $zsh_src
./Util/preconfig
./configure --disable-gdbm --disable-pcre --without-tcsetpgrp ${bundle:+DL_EXT=bundle}
make -j$nproc

# we only need aloxaf/fzftab.so
mv ./Src/Modules/fzftab.(so|bundle) $FZF_TAB_HOME/modules/Src/aloxaf/
} always {
  git -C $zsh_src clean -fxd
}
